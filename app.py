import streamlit as st
import pandas as pd
import plotly.express as px

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="IA de Compliance", page_icon="üõ°Ô∏è", layout="wide")

# --- Navega√ß√£o ---
st.sidebar.title("Navega√ß√£o")
page = st.sidebar.radio("Selecione uma op√ß√£o:", ["P√°gina Inicial", "Painel RH/Compliance"])

# --- P√°gina Inicial ---
if page == "P√°gina Inicial":
    st.title("üõ°Ô∏è IA Assistente de Compliance")
    st.markdown("""
    Sua voz √© essencial para construirmos um ambiente de trabalho mais √©tico e seguro.
    **Todas as den√∫ncias s√£o an√¥nimas.** Sua identidade ser√° totalmente protegida.
    """)
    st.markdown("---")

    # Formul√°rio de den√∫ncia
    st.header("Formul√°rio de Den√∫ncia An√¥nima")
    denuncia_texto = st.text_area("Descreva o ocorrido:", height=200)
    setor_escolhido = st.selectbox(
        "Selecione o setor onde ocorreu:",
        ("", "Engenharia", "Produ√ß√£o", "Marketing", "Recursos Humanos", "Financeiro", "Outro")
    )
    botao_enviar = st.button("Enviar Den√∫ncia")

    if botao_enviar:
        if denuncia_texto and setor_escolhido:
            tipo_denuncia = "Ass√©dio Moral"  # Placeholder
            st.success("‚úÖ Sua den√∫ncia foi enviada com sucesso! Obrigado pela colabora√ß√£o.")
        else:
            st.warning("‚ö†Ô∏è Por favor, preencha todos os campos obrigat√≥rios.")

# --- Painel RH/Compliance ---
elif page == "Painel RH/Compliance":
    st.subheader("üîí Login RH/Compliance")
    senha_digitada = st.text_input("Digite a senha de acesso:", type="password")
    senha_correta = "12345"  # Substitua por uma senha segura

    if senha_digitada == senha_correta:
        st.success("‚úÖ Acesso autorizado")
        st.title("üìä Painel de An√°lise de Den√∫ncias")
        st.markdown("---")

        # Dados de simula√ß√£o
        dados_denuncias_simulacao = {
            'tipo_denuncia': ['Ass√©dio Moral', 'Ass√©dio Sexual', 'Racismo', 'Ass√©dio Moral', 'Ass√©dio Sexual', 'Homofobia', 'Ass√©dio Moral'],
            'setor': ['Engenharia', 'Produ√ß√£o', 'Marketing', 'Engenharia', 'Recursos Humanos', 'Engenharia', 'Financeiro'],
            'data': pd.to_datetime(['2025-01-01', '2025-02-15', '2025-03-20', '2025-04-10', '2025-05-05', '2025-06-12', '2025-06-25'])
        }
        df_denuncias = pd.DataFrame(dados_denuncias_simulacao)

        # --- Gr√°ficos ---
        st.header("An√°lise de Den√∫ncias Recebidas")
        col1, col2, col3 = st.columns(3)

        with col1:
            st.subheader("Por Tipo de Ass√©dio")
            contagem_tipo = df_denuncias['tipo_denuncia'].value_counts().reset_index()
            contagem_tipo.columns = ['Tipo de Ass√©dio', 'N√∫mero de Casos']
            fig_barras = px.bar(contagem_tipo, x='Tipo de Ass√©dio', y='N√∫mero de Casos', color='Tipo de Ass√©dio', title='Total de Casos por Tipo')
            st.plotly_chart(fig_barras, use_container_width=True)

        with col2:
            st.subheader("Por Setor")
            contagem_setor = df_denuncias['setor'].value_counts().reset_index()
            contagem_setor.columns = ['Setor', 'N√∫mero de Casos']
            fig_pizza = px.pie(contagem_setor, values='N√∫mero de Casos', names='Setor', title='Distribui√ß√£o por Setor')
            st.plotly_chart(fig_pizza, use_container_width=True)

        with col3:
            st.subheader("Evolu√ß√£o Temporal")
            # Corrigido: converter Period em datetime
            df_denuncias['data_mes'] = df_denuncias['data'].dt.to_period('M').dt.to_timestamp()
            contagem_temporal = df_denuncias['data_mes'].value_counts().sort_index().reset_index()
            contagem_te_
